/****************************************************************************************/
/*Project name  : NS sample radio development                                           */
/*Process name  : UI task       	                                            		*/
/*Function name : State 02-04 Function file     										*/
/*Outline       : Main state 02 Normal mode, sub state 04   							*/
/*              : Describe the function to use when SEEK tuning                         */
/*Warranty      : This source code is generated with due care, however Niigata Seimitsu */
/*              : makes no warranty whatsoever that the use of the source code does not */
/*              : infringe or may not cause the infringement of patent right or other   */
/*              : intellectual property rights owned or controlled by third parties.    */
/*              : This source code is illustrative only of the control software for NS  */
/*              : module, and Niigata Seimitsu makes no warranty whatsoever the use of  */
/*              : this source code is suitable for the mass production.                 */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
#include <avr/pgmspace.h>
#include "string.h"
#include "SC_defin.h"
#include "sc_strct.h"
#include "SC_proto.h"
#include "ch_defin.h"
#include "CH_strct.h"
#include "CH_proto.h"
#include "ms_defin.h"
#include "MS_strct.h"
#include "tm_defin.h"
#include "tm_strct.h"
#include "tm_if.h"
#include "ky_if.h"
#include "RM_if.h"
#include "UI_defin.h"
#include "UI_strct.h"
#include "UI_proto.h"

/****************************************************************************************/
/*   EXTERNAL REFERENCE INFORMATION                                                     */
/****************************************************************************************/

/****************************************************************************************/
/*   LOCAL INFORMATION                                                                  */
/****************************************************************************************/
/* Select STATIC while debugging*/
UCHAR gui_0204_ctl;							/* For state 0204 Control information	  	*/
UCHAR gui_0204_num;							/* For state 0204 VCOMP & JE trial time     */
UCHAR gui_0204_ok;							/* For state 0204 VCOMP & JE successful time*/
UCHAR gui_0204_led;							/* For state 0204 LED counter				*/

/*======================================================================================*/
/*   FUNCTION TYPE                                                                      */
/*======================================================================================*/
static void ui_exec00_0204(void);
static void ui_exec01_0204(void);
static void ui_seek_updown(void);
static void ui_seek_updown(void);
static void ui_seek_timstp_all(void);
static void ui_seek_end(void);
//static void ui_led_cnt(void);

/*======================================================================================*/
/*   OPERATION AREA                                                                     */
/*======================================================================================*/

/*======================================================================================*/
/*   LOCAL CONSTANT NUMBER               	                                            */
/*======================================================================================*/
PROGMEM void * const ui_exectbl0204[] =
{
	(void *)ui_exec00_0204	,		/* Command 00 Time out      				*/
	(void *)ui_exec01_0204	,		/* Command 01 Key push down notice			*/
	(void *)ui_exec_nop		,		/* Command 03 Radio startup confirmation    */
	(void *)ui_exec_nop				/* Command 08 E2P all readout response		*/
};

/****************************************************************************************/
/*Project name  : NS sample radio development                                           */
/*Process name  : UI task       	                                            		*/
/*Function name : Set SEEK direction									                */
/*Outline       : 																		*/
/*Function      : 								                                        */
/*Returned value: nil                                                                   */
/*Argument      : Direction			                                                    */
/*Input-output  : nil                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
void ui_seek_modeset(UCHAR up_down)
{
	gui_0204_ctl = up_down;				/* For state0204 Initialize control information	*/
}

/****************************************************************************************/
/*Project name  : NS sample radio development                                           */
/*Process name  : UI task       	                                            		*/
/*Function name : Initialize at separate state                                          */
/*Outline       : Have a call from the main section when the state is changed	    	*/
/*Function      : 								                                        */
/*Returned value: nil                                                                   */
/*Argument      : nil                                                                   */
/*Input-output  : nil                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
void ui_0204_init(void)
{
	//h_led_off();
    //ui_timstr(DUI_TM_LED_BLK);
	gui_0204_led = 0;

	ui_mute_cont(DUI_TONE_ON | DSC_ON);					/* MUTE ON						*/
    ui_timstr(DUI_TM_SEEK_WAIT);						/* Issue WAIT timer when starting SEEK				*/

	gui_0204_num = 0;									/* For state0204 Initialize VCOMP & JE trial time	*/
	gui_0204_ok = 0;									/* For state0204 Initialize VCOMP & JEsuccessful time*/
 	api_radio_set(DRM_SDT,DRM_SDT_SD);					/* STJO PORT CONTROL = SD output					*/
 	api_radio_set(DRM_SEEK,DRM_SEEK_ENA);				/* IF COUNT enable									*/
}

/****************************************************************************************/
/*Project name  : NS sample radio development                                           */
/*Process name  : UI task       	                                            		*/
/*Function name : Command00	Process timeout         			                        */
/*Outline       : 																		*/
/*Function      : 								                                        */
/*Returned value: nil                                                                   */
/*Argument      : nil                                                                   */
/*Input-output  : nil                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
void ui_exec00_0204(void)
{
	UCHAR w_timid;
	UCHAR w_timno;

	w_timid = ((TTM_TIMEOUT*)GUI_RCVAD) -> timid;
	w_timno = ((TTM_TIMEOUT*)GUI_RCVAD) -> timno;

	if((gui_ctl.timno[w_timid] & DUI_TM_ON)&&				/* While issueing timer and	*/
      ((gui_ctl.timno[w_timid] & ~DUI_TM_ON) == w_timno))   /* Consistent with timer number?*/
    {
    	gui_ctl.timno[w_timid] &= ~DUI_TM_ON;				/* Record timer is stopping	*/

		switch(w_timid)										/* By the timer ID			*/
		{

            case DUI_TM_SEEK_WAIT:							/* WAIT timer when starting */
				ui_seek_updown();							/* Common process of SEEK up and down	*/
				break;

			case DUI_TM_PLL_CHG_LIM:	     				/* PLL upper limit<->WAIT timer when lower limit is changed */
			case DUI_TM_PLL_CHG:        				    /* WAIT timer when PLL is changed*/
				if(api_radio_stdo_req())					/* VCOMP = 1ÅH					*/
				{
					api_radio_set(DRM_SDT,DRM_SDT_JE);		/* SET JE						*/
					api_radio_set(DRM_CKE,DRM_CKE_NORMAL);	/* IFC time base = ON			*/
					ui_timstr(DUI_TM_IFCST);				/* Issue timer to wait IFCST setting*/
				}
				else
				{
					ui_seek_updown();					/* Common process for SEEK up and down*/
				}
				break;

			case DUI_TM_IFCST:								/* Timer to wait IFCST setting*/
				api_radio_set(DRM_IFCST,DRM_IFCST_STP);		/* Stop IF count		 	*/
				api_radio_set(DRM_IFCST,DRM_IFCST_STA);		/* Start IF count 			*/
				ui_timstr(DUI_TM_JE);						/* Issue to wait JE check	*/
				break;

			case DUI_TM_JE:                       			/* Timer to wait JE check	*/
				gui_0204_num++;
	            if(api_radio_stdo_req())					/* JE = 1?						*/
				{
					gui_0204_ok++;							/* Add JE successful time   	*/
				}
				if(gui_0204_num < DUI_JE_NUM) 	 			/* Less tha trial time?			*/
				{
// /*81ã§í ÉoÉO*/			        ui_timstr(DUI_TM_JE);					/* Timer reissue				*/
			        ui_timstr(DUI_TM_IFCST);					/* Timer reissue				*/
				}
				else                                       	/* When trial is completed		*/
				{
	                if(gui_0204_ok >= DUI_JE_OK)			/* Any channnel exist?			*/
					{
						ui_seek_end();						/* Common process to end SEEK	*/
						ui_stsset(DUI_ST_NORMAL_IDLE,0);	/* Transition to normal mode idling*/
					}
					else
					{
					 	api_radio_set(DRM_SDT,DRM_SDT_SD);	/* STJO PORT CONTROL = SD output*/
						api_radio_set(DRM_CKE,DRM_CKE_OFF);	/* IFC time base = OFF			*/
						api_radio_set(DRM_IFCST,DRM_IFCST_STP);/* IF count start trigger normal*/
						ui_seek_updown();					/* Common process for SEEK up and down*/
					}
					gui_0204_num = 0;						/* For state0204 Initialize JE trial time*/
					gui_0204_ok = 0;						/* For state0204 Initialize JE successful time*/
				}
				break;

			//case DUI_TM_LED_BLK:                       		/* LEDÉuÉäÉìÉN								*/
				//gui_0204_led++;
				//ui_led_cnt();
	            //ui_timstr(DUI_TM_LED_BLK);
				break;

       		default:
				ui_exec00_def(w_timid);
				break;
		}
	}
}

/****************************************************************************************/
/*Project name  : NS sample radio development                                           */
/*Process name  : UI task       	                                            		*/
/*Function name : Command01	Process when recieving key push down notice	                */
/*Outline       : 																		*/
/*Function      : 								                                        */
/*Returned value: nil                                                                   */
/*Argument      : nil                                                                   */
/*Input-output  : nil                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
static void ui_exec01_0204(void)
{
	GUI_KEY = ((TKY_KEY_ON*)GUI_RCVAD) -> keycode;

	switch(GUI_KEY) 									/* Process by the key code		*/
	{
		case DKY_UI_DOWN05:								/* DOWN 0.5sec					*/
		case DKY_UI_UP05:								/* UP 0.5sec					*/
		case DKY_UI_FM:									/* FM							*/
		//case DKY_UI_AM:									/* AM							*/
			ui_seek_timstp_all();						/* Complete stop SEEK timer		*/
			ui_seek_end();								/* Common SEEK stop process		*/
			ui_stsset(DUI_ST_NORMAL_IDLE,DUI_NEXTGO);	/* Transition to normla mode idling(continue)*/
			break;

		case DKY_UI_DOWN:								/* DOWN							*/
		case DKY_UI_UP:									/* UP							*/
			ui_mute_cont(DUI_TONE_ON | DSC_ON);			/* TONE ON						*/
			ui_seek_timstp_all();						/* Complete stop SEEK timer		*/
			ui_seek_end();								/* Common SEEK stop process		*/
			ui_stsset(DUI_ST_NORMAL_IDLE,0);			/* Transition to normla mode idling*/
			break;

		default:
			break;
	}
}

/****************************************************************************************/
/*Project name  : NS sample radio development                                           */
/*Process name  : UI task       	                                            		*/
/*Function name : Common process for SEEK up and down							        */
/*Outline       : 																		*/
/*Function      : 								                                        */
/*Returned value: nil                                                                   */
/*Argument      : nil                                                                   */
/*Input-output  : nil                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
static void ui_seek_updown(void)
{
	UCHAR	w_timid;
	UCHAR	w_chg;

	if(gui_0204_ctl & DUI_SEEK_UP)							/* SEEK UP?					*/
		w_chg = ui_freq_nown_inc();							/* Add frequency			*/
    else
		w_chg = ui_freq_nown_dec();							/* Subtract frequency		*/

    if(w_chg == DUI_CHANGE)                		     /* Frequency upper limit->lower limit Lower limit->change upper limit*/
	{
		w_timid = DUI_TM_PLL_CHG_LIM; 						/* PLL upper limit<->WAIT timer when lower limit change*/
	}
    else
	{
       	w_timid = DUI_TM_PLL_CHG;							/* WAIT timer when PLL changePLL*/
	}
    ui_timstr(w_timid);										/* Issue timer  			*/

	ui_freq_chg();  										/* Common process when frequency change*/
	ui_radio_freq_upd(GUI_PRESET(DRM_E2P_LAST_FREQ));		/* Set frequency 			*/
}


/****************************************************************************************/
/*Project name  : NS sample radio development                                           */
/*Process name  : UI task       	                                            		*/
/*Function name : SEEK timer complete stop  						  				    */
/*Outline       : 																		*/
/*Function      : 								                                        */
/*Returned value: nil                                                                   */
/*Argument      : nil                                                                   */
/*Input-output  : nil                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
static void ui_seek_timstp_all(void)
{
	ui_timstp(DUI_TM_SEEK_WAIT);
	ui_timstp(DUI_TM_PLL_CHG);
	ui_timstp(DUI_TM_PLL_CHG_LIM);
	ui_timstp(DUI_TM_IFCST);
	ui_timstp(DUI_TM_JE);
}

/****************************************************************************************/
/*Project name  : NS sample radio development                                           */
/*Process name  : UI task       	                                            		*/
/*Function name : Common process to end SEEK									  	    */
/*Outline       : 																		*/
/*Function      : 								                                        */
/*Returned value: nil                                                                   */
/*Argument      : nil                                                                   */
/*Input-output  : nil                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
static void ui_seek_end(void)
{
	gui_0204_ctl = 0;
//	api_radio_set(DRM_SDT,DRM_SDT_ST);					/* Set STDO port stereo			*/
	api_radio_set(DRM_CKE,DRM_CKE_OFF);					/* IFC time base = OFF			*/
	api_radio_set(DRM_IFCST,DRM_IFCST_STP);				/* IF count start trigger normal*/
	api_radio_set(DRM_SEEK,DRM_SEEK_DIS);				/* IF COUNT disable				*/
	ui_freq_chg();							/* Common process when frequency is changed	*/

	ui_timstr(DUI_TM_MUTE05);						/* Issue MUTE timer(0.5sec)			*/
}

//static void ui_led_cnt(void)
//{
	//UCHAR seed;

	//if(  80 < (GUI_PRESET(DRM_E2P_LAST_FREQ)))
	//{
	//	seed = 0x01;
	//}
	//else if(  40 < (GUI_PRESET(DRM_E2P_LAST_FREQ)))
	//{
	//	seed = 0x02;
	//}
	//else
	//{
	//	seed = 0x04;
	//}

	//if(gui_0204_led & seed)
		//h_led_off();
	//else
		//h_led_on();
//}

