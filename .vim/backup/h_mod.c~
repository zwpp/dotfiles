/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			             			                      	*/
/*File name    : Function file of module handler										*/
/*Outline      : Define handler related to module										*/
/*Warranty      : This source code is generated with due care, however Niigata Seimitsu */
/*              : makes no warranty whatsoever that the use of the source code does not */
/*              : infringe or may not cause the infringement of patent right or other   */
/*              : intellectual property rights owned or controlled by third parties.    */
/*              : This source code is illustrative only of the control software for NS  */
/*              : module, and Niigata Seimitsu makes no warranty whatsoever the use of  */
/*              : this source code is suitable for the mass production.                 */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
/*****   INCLUDE FILE     *****/
#include <avr/io.h>
#include <avr/pgmspace.h>
#include "deprecated.h"
#include "string.h"
#include "SC_defin.h"
#include "sc_strct.h"
#include "SC_proto.h"
#include "ch_defin.h"
#include "CH_strct.h"
#include "CH_proto.h"
#include "ms_defin.h"
#include "MS_strct.h"
#include "tm_defin.h"
#include "tm_strct.h"
#include "tm_if.h"
#include "ky_if.h"
#include "RM_if.h"
#include "UI_defin.h"
#include "UI_strct.h"
#include "UI_proto.h"

/****************************************************************************************/
/*   EXTERNAL REFERENCE INFORMATION                                                     */
/****************************************************************************************/

/****************************************************************************************/
/*   LOCAL INFORMATION                                                                  */
/****************************************************************************************/
/*======================================================================================*/
/*   FUNCTION TYPE	  			                                                        */
/*======================================================================================*/
static void h_e2p_sta(void);
static void h_e2p_send(UCHAR para);
static UCHAR h_e2p_recv(UCHAR ack);
static void h_e2p_stp(void);


/*======================================================================================*/
/*   CONSTATNT INFORMATION	  			                        				        */
/*======================================================================================*/
/* MODULE I/F definition */
#define P_MOD_CSCK_HI	(sbi(PORTC,PC5))/* MODULE clock HIGH		*/
#define P_MOD_CSCK_LO	(cbi(PORTC,PC5))/* MODULE clock LOW			*/

//#define P_E2P_SCL_HI	P_MOD_CSCK_HI	/* E2PROM SCL HIGH (NS98MODULE dual with clock)	*/
//#define P_E2P_SCL_LO	P_MOD_CSCK_LO	/*            LOW    							*/
#define P_E2P_SCL_HI	outp(inp(PINC) | _BV(PC5) , PORTC ) //P_MOD_CSCK_HI	/* E2PROM SCL HIGH (NS98MODULE dual with clock)	*/
#define P_E2P_SCL_LO	outp(inp(PINC) & ~_BV(PC5) , PORTC )//P_MOD_CSCK_LO	/*            LOW    							*/

#define P_MOD_CSDO_HI	(sbi( PORTC, PC4  ))	/* CSDIout MODULE データ(OUT) HIGH	*/
#define P_MOD_CSDO_LO	(cbi( PORTC, PC4  ))	/* CSDIout MODULE データ(OUT) LOW	*/
#define P_E2P_SDO_HI	(sbi( PORTC, PC4  )) //P_MOD_CSDO_HI	/* E2PROM SDO  HIGH(CSDIout MODULE データ(OUT)と兼用)*/
#define P_E2P_SDO_LO	(cbi( PORTC, PC4  )) //P_MOD_CSDO_LO	/* E2PROM SDO  LOW (CSDIout MODULE データ(OUT)と兼用)*/

#define P_SDA_IN	cbi(DDRC,PC4)		/* SDA = 入力									*/
#define P_SDA_OUT	sbi(DDRC,PC4)		/* SDA = 出力									*/

#define P_E2P_SDI	(inp(PINC) & 0x10)	/* E2PROM SDI (CSDIin )							*/
#define DHD_SDI_HI	0x10				/* SDA(INPUT)	HIGH							*/
#define DHD_SDI_LO	0x00				/* 				LOW								*/

#define P_MOD_STDO	(inp(PIND) & 0x08) 	/* MODULE STDO									*/
#define DHD_STDO_HI	0x08					/* 				HIGH							*/
#define DHD_STDO_LO	0					/* 				LOW								*/

#define P_MOD_LATCH_HI	(sbi(PORTC,PC6  ))	/* MODULE ラッチ HIGH		*/
#define P_MOD_LATCH_LO	(cbi(PORTC,PC6  ))/* MODULE ラッチ LOW		*/

#define DHD_E2P_READ	0xA1  			/* device address(for lead)						*/
#define DHD_E2P_WRITE	0xA0  			/* device address(for lead)						*/

#define	DHD_NOACK 	0 	 	        	/* no ACK										*/
#define	DHD_ACK     1		 		    /* ACK											*/

#define P_MUTE_OFF	(cbi(PORTC ,PC3))/* MUTE ON						*/
#define P_MUTE_ON	(sbi(PORTC ,PC3))/* MUTE OFF						*/

/* DEBUG SWITCH */
#define DHD_SERIAL_DELAY				/* Serial delay switch							*/
#define DHD_M_WAIT	3
#define DHD_E_WAIT	9
							/* (A definition is given when using a serial monitor.)		*/

/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			                                   			  	*/
/*Function name: Readout handler of STDO port			                 			    */
/*Outline      : 						                  							    */
/*Function     : Setup from radio monitoring task								        */
/*Returned value: STDO value                                                            */
/*Argument     : None																	*/
/*Input-output : None                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
UCHAR h_mod_read(void)
{
	UCHAR w_stdo;

	w_stdo = P_MOD_STDO;

	if(w_stdo == DHD_STDO_HI)
		w_stdo = DSC_OFF;
	else
		w_stdo = DSC_ON;

	return(w_stdo);
}

/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			                                     			*/
/*Function name: Register writing handler    			                        		*/
/*Outline      : 						   	    	        							*/
/*Function     : Setup radio monitoring task 									        */
/*Returned value: None                                                                  */
/*Argument     : Writing parameter pointer												*/
/*Input-output : None                      						                        */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
void h_reg_w(TRM_REG_WRITE *parap  )
{
	UCHAR i;
	UCHAR w_bit;

	P_MOD_CSCK_LO;						/* SCL = L										*/

	/* ADDR SEND */
	for(i=0;i < DRM_RADRLEN;i++)
	{
		w_bit = (parap->addr >> i) & 0x01;

		if(w_bit)
			P_MOD_CSDO_HI;
		else
			P_MOD_CSDO_LO;

#ifdef DHD_SERIAL_DELAY
		h_wait(DHD_M_WAIT);				/* Data input hold time(min:0)					*/
#else
		nop();
#endif
		P_MOD_CSCK_HI;					/* SCL = H										*/
#ifdef DHD_SERIAL_DELAY
		h_wait(DHD_M_WAIT);				/* Clock"H" hold time (min:1us)					*/
#else
		nop();
#endif
		P_MOD_CSCK_LO;					/* SCL = L										*/
#ifdef DHD_SERIAL_DELAY
		h_wait(DHD_M_WAIT);				/* Clock"L"hold time (min:1us)					*/
#else
		nop();
#endif
	}

	/* DATA SEND */
	for(i=0;i < DRM_RDATALEN;i++)
	{
		w_bit = (parap->data[0] >> i) & 0x01;

		if(w_bit)
			P_MOD_CSDO_HI;
		else
			P_MOD_CSDO_LO;
		
#ifdef DHD_SERIAL_DELAY
		h_wait(DHD_M_WAIT);				/* Data input hold time (min:0)					*/
#else
		nop();
#endif
		P_MOD_CSCK_HI;					/* SCL = H										*/
#ifdef DHD_SERIAL_DELAY
		h_wait(DHD_M_WAIT);				/* Clock"H" hold time (min:1us)					*/
#else
		nop();
#endif
		P_MOD_CSCK_LO;					/* SCL = L										*/
#ifdef DHD_SERIAL_DELAY
		h_wait(DHD_M_WAIT);				/* Clock"L"hold time (min:1us)					*/
#else
		nop();
#endif
	}

	P_MOD_LATCH_HI;						/* ラッチアップ									*/
#ifdef DHD_SERIAL_DELAY
	h_wait(DHD_M_WAIT);					/* Latch hold time (min:1us)					*/
#else
	nop();
#endif

	P_MOD_LATCH_LO;						/* ラッチクリア									*/
#ifdef DHD_SERIAL_DELAY
	h_wait(DHD_M_WAIT);					/* Latch hold time (min:1us)					*/
#else
	nop();
#endif
}

/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			                                     			*/
/*Function name: Readout handler of EEPROM				 	 							*/
/*Outline      : 						   	   							 		        */
/*Function     : Set up from radio monitoring task										*/
/*Returned value: DSC_OK,DSC_NG                                                         */
/*Argument     : Parameter address 				                        				*/
/*Input-output : None                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
void h_e2p_r(TRM_E2P_READ *parap)
{
	UCHAR i;
	UCHAR w_len;

	w_len = parap -> len;

	h_e2p_sta();								/* Issue start condition				*/

	h_e2p_send(DHD_E2P_WRITE);					/* Set address  						*/

	h_e2p_send(parap -> addr);					/* Dummy write							*/

	h_e2p_sta();								/* Issue start condtion					*/

	h_e2p_send(DHD_E2P_READ);					/* Set device address 					*/

	if(w_len > 1)
	{
		for( i=0; i<(w_len-1) ;i++)	            /* Seek and shall light					*/
		{
			parap->data[i] = h_e2p_recv(DHD_ACK);
		}
		parap->data[i] = h_e2p_recv(DHD_NOACK);
	}
	else
	{
		parap->data[0] = h_e2p_recv(DHD_NOACK);
	}

	h_e2p_stp();								/* Issue stop condition					*/

	h_wait(DHD_E_WAIT);						/* The weight time for continuation reading */
}

//v2.00 add-s
void h_avre2p_r(TRM_E2P_READ *parap)
{
	UCHAR i;

	while(EECR & (1<<EEWE));	 /* 以前のEEPROM書き込み完了まで待機*/

	for( i=0; i<(parap -> len) ;i++)	            /* Seek and shall light					*/
	{
		 EEAR = parap -> addr + i;	 /* EEPROMｱﾄﾞﾚｽ設定*/
		 EECR |= (1<<EERE);	 		/* EEPROM読み出し開始*/
		 parap->data[i] =  EEDR;	/* EEPROM読み出し値を取得,復帰*/
	}
}
//v2.00 add-e


/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			                                     	        */
/*Function name: Readout handler of EEPROM				 	 	                    	*/
/*Outline      : 						   	    	     							   	*/
/*Function     : Set up from radio monitoring task										*/
/*Returned value: DSC_OK,DSC_NG                                                         */
/*Argument     : Parameter address 				 					                    */
/*Input-output : None                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
//UCHAR h_e2p_w(TRM_E2P_WRITE *parap)
void h_e2p_w(void)
{
#if 0
	UCHAR addr;
	UCHAR data[2];

	memcpy(&data[0],&GUI_PRESET(0),2);

	if(GSC_MAIN_BAND == DRM_BAND_FM)
	{
		addr = DRM_E2P_FM1_ADDR;
	}
	else
	{
		addr = DRM_E2P_AM1_ADDR;
	}

	h_e2p_sta();							/* Issue start condtion						*/

	h_e2p_send(DHD_E2P_WRITE);				/* Set address								*/
	h_e2p_send(addr);

	h_e2p_send(data[0]);

	if(GSC_MAIN_BAND == DRM_BAND_FM)
	{
		h_e2p_send(data[1]);
	}

	h_e2p_stp();							/* Issue stop condition						*/
#else
	UCHAR i,cnt;
	UCHAR addr;
	UCHAR data[2];

	memcpy(&data[0],&GUI_PRESET(0),2);

	if(GSC_MAIN_BAND == DRM_BAND_FM)
	{
		cnt = 2;
		addr = DRM_E2P_FM1_ADDR;
	}
	else
	{
		cnt = 1;
		addr = DRM_E2P_AM1_ADDR;
	}


	for(i=0; i < cnt;i++)
	{
		 while(EECR & (1<<EEWE));	 /* 以前のEEPROM書き込み完了まで待機*/
		 EEAR = addr + i;	 /* EEPROMｱﾄﾞﾚｽ設定*/
		 EEDR = data[i];	 /* EEPROM書き込み値を設定*/
		 EECR |= (1<<EEMWE); /* EEPROMﾏｽﾀ書き込み許可*/
		 EECR |= (1<<EEWE);	 /* EEPROM書き込み開始*/
	}

#endif
}

/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : MUTE handler			                                     	        */
/*Function name: 											 	                    	*/
/*Outline      : 						   	    	     							   	*/
/*Function     : Set up from Radio API													*/
/*Returned value: None                                                                  */
/*Argument     : Parameter address 				 					                    */
/*Input-output : None                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
void h_mod_mute(UCHAR para)
{
	if(para == DSC_ON)
		P_MUTE_ON;
	else
		P_MUTE_OFF;
}

/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			                         		            	*/
/*Function name: Issue handler of EEPROM start condition 	                   		    */
/*Outline      : 		   	    	                                        			*/
/*Function     : Set up from module handler												*/
/*Returned value: None                                                                  */
/*Argument     : None																	*/
/*Input-output : None                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
static void h_e2p_sta(void)
{

	P_E2P_SDO_HI;						/* SDO = H										*/

//	nop();
	h_wait(DHD_E_WAIT);	//test

	P_E2P_SCL_HI;						/* SCL = H										*/

	h_wait(DHD_E_WAIT);					/* Start condition setup time (min:4.7μ)		*/

	P_E2P_SDO_LO;						/* SDO = L										*/

	h_wait(DHD_E_WAIT);					/* Start condition setup time (min:4.7μ)		*/

	P_E2P_SCL_LO;						/* SCL = L										*/

//	nop();
	h_wait(DHD_E_WAIT);	//test

	P_E2P_SDO_HI;				        /* Return to SDO								*/
}

/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			                                     			*/
/*Function name: Handler sender  of EEPROM data		                       		        */
/*Outline      : 	   	    	                	              				        */
/*Function     : Set up from module handler												*/
/*Returned value: DSC_OK,DSC_NG                                                         */
/*Argument     : None																	*/
/*Input-output : None                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
static void h_e2p_send(UCHAR para)
{
	UCHAR i;
	UCHAR w_bit;

	for(i=0;i<8;i++)
	{
		P_E2P_SCL_LO;					/* SCL = L										*/

		h_wait(DHD_E_WAIT);				/* Data input setup time (min:200n)				*/

		w_bit = ((para << i ) & 0x80);	/* takeout bitdata 								*/

		if(w_bit)						/* bit ON?										*/
			P_E2P_SDO_HI;
 		else
			P_E2P_SDO_LO;

		h_wait(DHD_E_WAIT);				/* Clock"L"hold time (min:4.7μ)				*/

		P_E2P_SCL_HI;					/* SCL = H										*/

		h_wait(DHD_E_WAIT);				/* Clock"H"hold time (min:4.0μ)				*/
	}

	/* ACK timing */
   	P_E2P_SCL_LO;						/* SCL = L										*/

	nop();
//	h_wait(DHD_E_WAIT);	//test

	P_SDA_IN;							/* SDA = 入力									*/

	h_wait(DHD_E_WAIT);					/* Clock"L"hold time (min:4.7μ)				*/

	P_E2P_SCL_HI;						/* SCL = H										*/

	nop();
//	h_wait(DHD_E_WAIT);	//test

	FOREVER
	{
		if(P_E2P_SDI == DHD_SDI_LO)		/* ACK wating									*/
		{
			break;
		}
	}

   	P_E2P_SCL_LO;						/* SCL = L										*/

	h_wait(DHD_E_WAIT);					/* Clock"H"hold time (min:4.0μ)				*/

	P_SDA_OUT;							/* SDA = 出力									*/
}

/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			                            		         	*/
/*Function name: Handler receiver of EEPROM data		                                */
/*Outline      : 	   	    	                	                                    */
/*Function     : Set up from module handler												*/
/*Returned value: Receiver data                                                         */
/*Argument     : without ACK = DHD_NOACK, with ACK = DHD_ACK				            */
/*Input-output : None                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
static UCHAR h_e2p_recv(UCHAR ack)
{
	UCHAR ret = 0;
	UCHAR i;

	P_SDA_IN;							/* SDA = 入力									*/

	for(i=0;i<8;i++)
	{
		nop();
//		h_wait(DHD_E_WAIT);	//test

		P_E2P_SCL_LO;					/* SCL = L										*/

		h_wait(DHD_E_WAIT);				/* Clock"L"hold time (MIN:4.7μ)				*/

		P_E2P_SCL_HI;					/* SCL = H										*/

		h_wait(DHD_E_WAIT *2 );			/* Clock"H"hold time (min:4.0μ)				*/

		if(P_E2P_SDI != DHD_SDI_LO)		/* bit ON?										*/
			ret |= 0x80 >> i;
	}

	P_SDA_OUT;							/* SDA = 出力									*/

	nop();
//	h_wait(DHD_E_WAIT);	//test

	/* ACK sender */

   	P_E2P_SCL_LO;						/* SCL = L										*/

//	h_wait(DHD_E_WAIT);	//test

	if(ack == DHD_ACK)
	    P_E2P_SDO_LO;					/* ACK/NO ACK送信								*/

	h_wait(DHD_E_WAIT);					/* Clock"L"hold time (min:4.7μ)				*/

	P_E2P_SCL_HI;						/* SCL = H										*/

	h_wait(DHD_E_WAIT);					/* Clock"H"hold time(min:4.0μ)					*/

   	P_E2P_SCL_LO;						/* SCL = L										*/

	nop();
//	h_wait(DHD_E_WAIT);	//test

	P_E2P_SDO_HI;			            /* return SDO									*/

	return(ret);
}

/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			               			                      	*/
/*Function name: EEPROM stop condition issue handler 		    	                    */
/*Outline      : 						   	    								        */
/*Function     : Set up from module handler												*/
/*Returned value : None                                                                 */
/*Argument     : None																	*/
/*Input-output : None                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
static void h_e2p_stp(void)
{
	P_E2P_SDO_LO;						/* SDO = L										*/

//	nop();
	h_wait(DHD_E_WAIT);

	P_E2P_SCL_HI;						/* SCL = H										*/

	h_wait(DHD_E_WAIT);					/* Stop condition set up time (min:4.7μ)		*/

	P_E2P_SDO_HI;						/* SDO = H										*/
}

/****************************************************************************************/
/*Project name : NS sample radio development                                            */
/*Process name : Module handler			                         		            	*/
/*Function name: EEPROM init handler 		                        					*/
/*Outline      : 						   	    	     								*/
/*Function     : Set up from module handler												*/
/*Returned value : None                                                                 */
/*Argument     : None																	*/
/*Input-output : None                                                                   */
/*Version       : v00.00 2002/09/25 1st edition by M.Kaneko                             */
/*   Copyright (C) 2002 Development Division of NIIGATA SEIMITSU                        */
/****************************************************************************************/
void h_e2p_ini(void)
{
	UCHAR i;

	h_e2p_sta();								/* Issue start condtion					*/

	for(i=0;i<9;i++)    						/* DUMMY CLOCK							*/
	{
		P_E2P_SCL_LO;							/* SCL = L								*/

		h_wait(DHD_E_WAIT);						/* Clock"L"hold time (MIN:4.7μ)		*/

		P_E2P_SCL_HI;							/* SCL = H								*/

		h_wait(DHD_E_WAIT);						/* Clock"H"hold time (MIN:4.0μ)		*/
	}

   	P_E2P_SCL_LO;								/* SCL = L								*/

	h_e2p_sta();								/* Issue start condtion					*/

	h_e2p_stp();								/* Issue stop condtion					*/
}

